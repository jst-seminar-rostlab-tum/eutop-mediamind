{
  "version": 3,
  "sources": ["../../openapi-fetch/src/index.js"],
  "sourcesContent": ["// settings & const\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\nconst supportsRequestInitExt = () => {\n  return (\n    typeof process === \"object\" &&\n    Number.parseInt(process?.versions?.node?.substring(0, 2)) >= 18 &&\n    process.versions.undici\n  );\n};\n\n/**\n * Returns a cheap, non-cryptographically-secure random ID\n * Courtesy of @imranbarbhuiya (https://github.com/imranbarbhuiya)\n */\nexport function randomID() {\n  return Math.random().toString(36).slice(2, 11);\n}\n\n/**\n * Create an openapi-fetch client.\n * @type {import(\"./index.js\").default}\n */\nexport default function createClient(clientOptions) {\n  let {\n    baseUrl = \"\",\n    Request: CustomRequest = globalThis.Request,\n    fetch: baseFetch = globalThis.fetch,\n    querySerializer: globalQuerySerializer,\n    bodySerializer: globalBodySerializer,\n    headers: baseHeaders,\n    requestInitExt = undefined,\n    ...baseOptions\n  } = { ...clientOptions };\n  requestInitExt = supportsRequestInitExt() ? requestInitExt : undefined;\n  baseUrl = removeTrailingSlash(baseUrl);\n  const middlewares = [];\n\n  /**\n   * Per-request fetch (keeps settings created in createClient()\n   * @param {T} url\n   * @param {import('./index.js').FetchOptions<T>} fetchOptions\n   */\n  async function coreFetch(schemaPath, fetchOptions) {\n    const {\n      baseUrl: localBaseUrl,\n      fetch = baseFetch,\n      Request = CustomRequest,\n      headers,\n      params = {},\n      parseAs = \"json\",\n      querySerializer: requestQuerySerializer,\n      bodySerializer = globalBodySerializer ?? defaultBodySerializer,\n      body,\n      ...init\n    } = fetchOptions || {};\n    let finalBaseUrl = baseUrl;\n    if (localBaseUrl) {\n      finalBaseUrl = removeTrailingSlash(localBaseUrl) ?? baseUrl;\n    }\n\n    let querySerializer =\n      typeof globalQuerySerializer === \"function\"\n        ? globalQuerySerializer\n        : createQuerySerializer(globalQuerySerializer);\n    if (requestQuerySerializer) {\n      querySerializer =\n        typeof requestQuerySerializer === \"function\"\n          ? requestQuerySerializer\n          : createQuerySerializer({\n              ...(typeof globalQuerySerializer === \"object\" ? globalQuerySerializer : {}),\n              ...requestQuerySerializer,\n            });\n    }\n\n    const serializedBody =\n      body === undefined\n        ? undefined\n        : bodySerializer(\n            body,\n            // Note: we declare mergeHeaders() both here and below because it’s a bit of a chicken-or-egg situation:\n            // bodySerializer() needs all headers so we aren’t dropping ones set by the user, however,\n            // the result of this ALSO sets the lowest-priority content-type header. So we re-merge below,\n            // setting the content-type at the very beginning to be overwritten.\n            // Lastly, based on the way headers work, it’s not a simple “present-or-not” check becauase null intentionally un-sets headers.\n            mergeHeaders(baseHeaders, headers, params.header),\n          );\n    const finalHeaders = mergeHeaders(\n      // with no body, we should not to set Content-Type\n      serializedBody === undefined ||\n        // if serialized body is FormData; browser will correctly set Content-Type & boundary expression\n        serializedBody instanceof FormData\n        ? {}\n        : {\n            \"Content-Type\": \"application/json\",\n          },\n      baseHeaders,\n      headers,\n      params.header,\n    );\n\n    const requestInit = {\n      redirect: \"follow\",\n      ...baseOptions,\n      ...init,\n      body: serializedBody,\n      headers: finalHeaders,\n    };\n\n    let id;\n    let options;\n    let request = new CustomRequest(\n      createFinalURL(schemaPath, { baseUrl: finalBaseUrl, params, querySerializer }),\n      requestInit,\n    );\n    let response;\n\n    /** Add custom parameters to Request object */\n    for (const key in init) {\n      if (!(key in request)) {\n        request[key] = init[key];\n      }\n    }\n\n    if (middlewares.length) {\n      id = randomID();\n\n      // middleware (request)\n      options = Object.freeze({\n        baseUrl: finalBaseUrl,\n        fetch,\n        parseAs,\n        querySerializer,\n        bodySerializer,\n      });\n      for (const m of middlewares) {\n        if (m && typeof m === \"object\" && typeof m.onRequest === \"function\") {\n          const result = await m.onRequest({\n            request,\n            schemaPath,\n            params,\n            options,\n            id,\n          });\n          if (result) {\n            if (result instanceof CustomRequest) {\n              request = result;\n            } else if (result instanceof Response) {\n              response = result;\n              break;\n            } else {\n              throw new Error(\"onRequest: must return new Request() or Response() when modifying the request\");\n            }\n          }\n        }\n      }\n    }\n\n    if (!response) {\n      // fetch!\n      try {\n        response = await fetch(request, requestInitExt);\n      } catch (error) {\n        let errorAfterMiddleware = error;\n        // middleware (error)\n        // execute in reverse-array order (first priority gets last transform)\n        if (middlewares.length) {\n          for (let i = middlewares.length - 1; i >= 0; i--) {\n            const m = middlewares[i];\n            if (m && typeof m === \"object\" && typeof m.onError === \"function\") {\n              const result = await m.onError({\n                request,\n                error: errorAfterMiddleware,\n                schemaPath,\n                params,\n                options,\n                id,\n              });\n              if (result) {\n                // if error is handled by returning a response, skip remaining middleware\n                if (result instanceof Response) {\n                  errorAfterMiddleware = undefined;\n                  response = result;\n                  break;\n                }\n\n                if (result instanceof Error) {\n                  errorAfterMiddleware = result;\n                  continue;\n                }\n\n                throw new Error(\"onError: must return new Response() or instance of Error\");\n              }\n            }\n          }\n        }\n\n        // rethrow error if not handled by middleware\n        if (errorAfterMiddleware) {\n          throw errorAfterMiddleware;\n        }\n      }\n\n      // middleware (response)\n      // execute in reverse-array order (first priority gets last transform)\n      if (middlewares.length) {\n        for (let i = middlewares.length - 1; i >= 0; i--) {\n          const m = middlewares[i];\n          if (m && typeof m === \"object\" && typeof m.onResponse === \"function\") {\n            const result = await m.onResponse({\n              request,\n              response,\n              schemaPath,\n              params,\n              options,\n              id,\n            });\n            if (result) {\n              if (!(result instanceof Response)) {\n                throw new Error(\"onResponse: must return new Response() when modifying the response\");\n              }\n              response = result;\n            }\n          }\n        }\n      }\n    }\n\n    // handle empty content\n    if (response.status === 204 || request.method === \"HEAD\" || response.headers.get(\"Content-Length\") === \"0\") {\n      return response.ok ? { data: undefined, response } : { error: undefined, response };\n    }\n\n    // parse response (falling back to .text() when necessary)\n    if (response.ok) {\n      // if \"stream\", skip parsing entirely\n      if (parseAs === \"stream\") {\n        return { data: response.body, response };\n      }\n      return { data: await response[parseAs](), response };\n    }\n\n    // handle errors\n    let error = await response.text();\n    try {\n      error = JSON.parse(error); // attempt to parse as JSON\n    } catch {\n      // noop\n    }\n    return { error, response };\n  }\n\n  return {\n    request(method, url, init) {\n      return coreFetch(url, { ...init, method: method.toUpperCase() });\n    },\n    /** Call a GET endpoint */\n    GET(url, init) {\n      return coreFetch(url, { ...init, method: \"GET\" });\n    },\n    /** Call a PUT endpoint */\n    PUT(url, init) {\n      return coreFetch(url, { ...init, method: \"PUT\" });\n    },\n    /** Call a POST endpoint */\n    POST(url, init) {\n      return coreFetch(url, { ...init, method: \"POST\" });\n    },\n    /** Call a DELETE endpoint */\n    DELETE(url, init) {\n      return coreFetch(url, { ...init, method: \"DELETE\" });\n    },\n    /** Call a OPTIONS endpoint */\n    OPTIONS(url, init) {\n      return coreFetch(url, { ...init, method: \"OPTIONS\" });\n    },\n    /** Call a HEAD endpoint */\n    HEAD(url, init) {\n      return coreFetch(url, { ...init, method: \"HEAD\" });\n    },\n    /** Call a PATCH endpoint */\n    PATCH(url, init) {\n      return coreFetch(url, { ...init, method: \"PATCH\" });\n    },\n    /** Call a TRACE endpoint */\n    TRACE(url, init) {\n      return coreFetch(url, { ...init, method: \"TRACE\" });\n    },\n    /** Register middleware */\n    use(...middleware) {\n      for (const m of middleware) {\n        if (!m) {\n          continue;\n        }\n        if (typeof m !== \"object\" || !(\"onRequest\" in m || \"onResponse\" in m || \"onError\" in m)) {\n          throw new Error(\"Middleware must be an object with one of `onRequest()`, `onResponse() or `onError()`\");\n        }\n        middlewares.push(m);\n      }\n    },\n    /** Unregister middleware */\n    eject(...middleware) {\n      for (const m of middleware) {\n        const i = middlewares.indexOf(m);\n        if (i !== -1) {\n          middlewares.splice(i, 1);\n        }\n      }\n    },\n  };\n}\n\nclass PathCallForwarder {\n  constructor(client, url) {\n    this.client = client;\n    this.url = url;\n  }\n\n  GET = (init) => {\n    return this.client.GET(this.url, init);\n  };\n  PUT = (init) => {\n    return this.client.PUT(this.url, init);\n  };\n  POST = (init) => {\n    return this.client.POST(this.url, init);\n  };\n  DELETE = (init) => {\n    return this.client.DELETE(this.url, init);\n  };\n  OPTIONS = (init) => {\n    return this.client.OPTIONS(this.url, init);\n  };\n  HEAD = (init) => {\n    return this.client.HEAD(this.url, init);\n  };\n  PATCH = (init) => {\n    return this.client.PATCH(this.url, init);\n  };\n  TRACE = (init) => {\n    return this.client.TRACE(this.url, init);\n  };\n}\n\nclass PathClientProxyHandler {\n  constructor() {\n    this.client = null;\n  }\n\n  // Assume the property is an URL.\n  get(coreClient, url) {\n    const forwarder = new PathCallForwarder(coreClient, url);\n    this.client[url] = forwarder;\n    return forwarder;\n  }\n}\n\n/**\n * Wrap openapi-fetch client to support a path based API.\n * @type {import(\"./index.js\").wrapAsPathBasedClient}\n */\nexport function wrapAsPathBasedClient(coreClient) {\n  const handler = new PathClientProxyHandler();\n  const proxy = new Proxy(coreClient, handler);\n\n  // Put the proxy on the prototype chain of the actual client.\n  // This means if we do not have a memoized PathCallForwarder,\n  // we fall back to the proxy to synthesize it.\n  // However, the proxy itself is not on the hot-path (if we fetch the same\n  // endpoint multiple times, only the first call will hit the proxy).\n  function Client() {}\n  Client.prototype = proxy;\n\n  const client = new Client();\n\n  // Feed the client back to the proxy handler so it can store the generated\n  // PathCallForwarder.\n  handler.client = client;\n\n  return client;\n}\n\n/**\n * Convenience method to an openapi-fetch path based client.\n * Strictly equivalent to `wrapAsPathBasedClient(createClient(...))`.\n * @type {import(\"./index.js\").createPathBasedClient}\n */\nexport function createPathBasedClient(clientOptions) {\n  return wrapAsPathBasedClient(createClient(clientOptions));\n}\n\n// utils\n\n/**\n * Serialize primitive param values\n * @type {import(\"./index.js\").serializePrimitiveParam}\n */\nexport function serializePrimitiveParam(name, value, options) {\n  if (value === undefined || value === null) {\n    return \"\";\n  }\n  if (typeof value === \"object\") {\n    throw new Error(\n      \"Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.\",\n    );\n  }\n  return `${name}=${options?.allowReserved === true ? value : encodeURIComponent(value)}`;\n}\n\n/**\n * Serialize object param (shallow only)\n * @type {import(\"./index.js\").serializeObjectParam}\n */\nexport function serializeObjectParam(name, value, options) {\n  if (!value || typeof value !== \"object\") {\n    return \"\";\n  }\n  const values = [];\n  const joiner =\n    {\n      simple: \",\",\n      label: \".\",\n      matrix: \";\",\n    }[options.style] || \"&\";\n\n  // explode: false\n  if (options.style !== \"deepObject\" && options.explode === false) {\n    for (const k in value) {\n      values.push(k, options.allowReserved === true ? value[k] : encodeURIComponent(value[k]));\n    }\n    const final = values.join(\",\"); // note: values are always joined by comma in explode: false (but joiner can prefix)\n    switch (options.style) {\n      case \"form\": {\n        return `${name}=${final}`;\n      }\n      case \"label\": {\n        return `.${final}`;\n      }\n      case \"matrix\": {\n        return `;${name}=${final}`;\n      }\n      default: {\n        return final;\n      }\n    }\n  }\n\n  // explode: true\n  for (const k in value) {\n    const finalName = options.style === \"deepObject\" ? `${name}[${k}]` : k;\n    values.push(serializePrimitiveParam(finalName, value[k], options));\n  }\n  const final = values.join(joiner);\n  return options.style === \"label\" || options.style === \"matrix\" ? `${joiner}${final}` : final;\n}\n\n/**\n * Serialize array param (shallow only)\n * @type {import(\"./index.js\").serializeArrayParam}\n */\nexport function serializeArrayParam(name, value, options) {\n  if (!Array.isArray(value)) {\n    return \"\";\n  }\n\n  // explode: false\n  if (options.explode === false) {\n    const joiner = { form: \",\", spaceDelimited: \"%20\", pipeDelimited: \"|\" }[options.style] || \",\"; // note: for arrays, joiners vary wildly based on style + explode behavior\n    const final = (options.allowReserved === true ? value : value.map((v) => encodeURIComponent(v))).join(joiner);\n    switch (options.style) {\n      case \"simple\": {\n        return final;\n      }\n      case \"label\": {\n        return `.${final}`;\n      }\n      case \"matrix\": {\n        return `;${name}=${final}`;\n      }\n      // case \"spaceDelimited\":\n      // case \"pipeDelimited\":\n      default: {\n        return `${name}=${final}`;\n      }\n    }\n  }\n\n  // explode: true\n  const joiner = { simple: \",\", label: \".\", matrix: \";\" }[options.style] || \"&\";\n  const values = [];\n  for (const v of value) {\n    if (options.style === \"simple\" || options.style === \"label\") {\n      values.push(options.allowReserved === true ? v : encodeURIComponent(v));\n    } else {\n      values.push(serializePrimitiveParam(name, v, options));\n    }\n  }\n  return options.style === \"label\" || options.style === \"matrix\"\n    ? `${joiner}${values.join(joiner)}`\n    : values.join(joiner);\n}\n\n/**\n * Serialize query params to string\n * @type {import(\"./index.js\").createQuerySerializer}\n */\nexport function createQuerySerializer(options) {\n  return function querySerializer(queryParams) {\n    const search = [];\n    if (queryParams && typeof queryParams === \"object\") {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n        if (value === undefined || value === null) {\n          continue;\n        }\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            continue;\n          }\n          search.push(\n            serializeArrayParam(name, value, {\n              style: \"form\",\n              explode: true,\n              ...options?.array,\n              allowReserved: options?.allowReserved || false,\n            }),\n          );\n          continue;\n        }\n        if (typeof value === \"object\") {\n          search.push(\n            serializeObjectParam(name, value, {\n              style: \"deepObject\",\n              explode: true,\n              ...options?.object,\n              allowReserved: options?.allowReserved || false,\n            }),\n          );\n          continue;\n        }\n        search.push(serializePrimitiveParam(name, value, options));\n      }\n    }\n    return search.join(\"&\");\n  };\n}\n\n/**\n * Handle different OpenAPI 3.x serialization styles\n * @type {import(\"./index.js\").defaultPathSerializer}\n * @see https://swagger.io/docs/specification/serialization/#path\n */\nexport function defaultPathSerializer(pathname, pathParams) {\n  let nextURL = pathname;\n  for (const match of pathname.match(PATH_PARAM_RE) ?? []) {\n    let name = match.substring(1, match.length - 1);\n    let explode = false;\n    let style = \"simple\";\n    if (name.endsWith(\"*\")) {\n      explode = true;\n      name = name.substring(0, name.length - 1);\n    }\n    if (name.startsWith(\".\")) {\n      style = \"label\";\n      name = name.substring(1);\n    } else if (name.startsWith(\";\")) {\n      style = \"matrix\";\n      name = name.substring(1);\n    }\n    if (!pathParams || pathParams[name] === undefined || pathParams[name] === null) {\n      continue;\n    }\n    const value = pathParams[name];\n    if (Array.isArray(value)) {\n      nextURL = nextURL.replace(match, serializeArrayParam(name, value, { style, explode }));\n      continue;\n    }\n    if (typeof value === \"object\") {\n      nextURL = nextURL.replace(match, serializeObjectParam(name, value, { style, explode }));\n      continue;\n    }\n    if (style === \"matrix\") {\n      nextURL = nextURL.replace(match, `;${serializePrimitiveParam(name, value)}`);\n      continue;\n    }\n    nextURL = nextURL.replace(match, style === \"label\" ? `.${encodeURIComponent(value)}` : encodeURIComponent(value));\n  }\n  return nextURL;\n}\n\n/**\n * Serialize body object to string\n * @type {import(\"./index.js\").defaultBodySerializer}\n */\nexport function defaultBodySerializer(body, headers) {\n  if (body instanceof FormData) {\n    return body;\n  }\n  if (headers) {\n    const contentType =\n      headers.get instanceof Function\n        ? (headers.get(\"Content-Type\") ?? headers.get(\"content-type\"))\n        : (headers[\"Content-Type\"] ?? headers[\"content-type\"]);\n    if (contentType === \"application/x-www-form-urlencoded\") {\n      return new URLSearchParams(body).toString();\n    }\n  }\n  return JSON.stringify(body);\n}\n\n/**\n * Construct URL string from baseUrl and handle path and query params\n * @type {import(\"./index.js\").createFinalURL}\n */\nexport function createFinalURL(pathname, options) {\n  let finalURL = `${options.baseUrl}${pathname}`;\n  if (options.params?.path) {\n    finalURL = defaultPathSerializer(finalURL, options.params.path);\n  }\n  let search = options.querySerializer(options.params.query ?? {});\n  if (search.startsWith(\"?\")) {\n    search = search.substring(1);\n  }\n  if (search) {\n    finalURL += `?${search}`;\n  }\n  return finalURL;\n}\n\n/**\n * Merge headers a and b, with b taking priority\n * @type {import(\"./index.js\").mergeHeaders}\n */\nexport function mergeHeaders(...allHeaders) {\n  const finalHeaders = new Headers();\n  for (const h of allHeaders) {\n    if (!h || typeof h !== \"object\") {\n      continue;\n    }\n    const iterator = h instanceof Headers ? h.entries() : Object.entries(h);\n    for (const [k, v] of iterator) {\n      if (v === null) {\n        finalHeaders.delete(k);\n      } else if (Array.isArray(v)) {\n        for (const v2 of v) {\n          finalHeaders.append(k, v2);\n        }\n      } else if (v !== undefined) {\n        finalHeaders.set(k, v);\n      }\n    }\n  }\n  return finalHeaders;\n}\n\n/**\n * Remove trailing slash from url\n * @type {import(\"./index.js\").removeTrailingSlash}\n */\nexport function removeTrailingSlash(url) {\n  if (url.endsWith(\"/\")) {\n    return url.substring(0, url.length - 1);\n  }\n  return url;\n}\n"],
  "mappings": "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",
  "names": ["error", "final", "joiner"]
}
