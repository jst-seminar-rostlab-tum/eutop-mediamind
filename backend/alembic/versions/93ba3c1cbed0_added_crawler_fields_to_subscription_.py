"""added crawler fields to subscription and articles

Revision ID: 93ba3c1cbed0
Revises: 82da1701bd5f
Create Date: 2025-06-16 20:35:05.893594

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "93ba3c1cbed0"
down_revision: Union[str, None] = "82da1701bd5f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "articles",
        sa.Column(
            "image_url",
            sa.Text(),
            nullable=True,
            comment="URL of the article's image",
        ),
    )
    op.add_column(
        "articles", sa.Column("relevance", sa.Integer(), nullable=False, server_default='0')
    )
    op.execute("""
            UPDATE articles
            SET category = '[]'
            WHERE category IS NULL OR trim(category) = '';
        """)
    op.execute(
        """
        ALTER TABLE articles
        ALTER COLUMN category
        TYPE JSON
        USING category::json
    """
    )

    op.execute(
        """
        COMMENT ON COLUMN articles.category IS 'List of categories for the
         article'
    """
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            server_default=sa.text('TRUE'),
            comment="Indicates if this is included in the webcrawling"
            " pipeline",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "crawlers",
            sa.JSON(),
            nullable=True,
            comment="List of Crawlers usedfor this subscription. "
            "Contains the Class and the config to initializer the Crawler",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "login_config",
            sa.JSON(),
            nullable=True,
            comment="Contains the xpath for the scraping of paywalled "
            "newspapers",
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "scrapers",
            sa.JSON(),
            nullable=True,
            comment="List of Scrapers used for this subscription. "
            "Contains the Class and the config to initialize the Scraper",
        ),
    )
    op.drop_column("subscriptions", "scraper_type")
    op.drop_column("subscriptions", "newsapi_id")
    op.drop_column("subscriptions", "login_works")
    op.drop_column("subscriptions", "vault_path")
    op.drop_column("subscriptions", "config")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "subscriptions",
        sa.Column(
            "config",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "vault_path",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "login_works", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "newsapi_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "subscriptions",
        sa.Column(
            "scraper_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_column("subscriptions", "scrapers")
    op.drop_column("subscriptions", "login_config")
    op.drop_column("subscriptions", "crawlers")
    op.drop_column("subscriptions", "is_active")
    op.execute(
        """
        ALTER TABLE articles
        ALTER COLUMN category
        TYPE VARCHAR
        USING category::text
    """
    )

    op.execute(
        """
        COMMENT ON COLUMN articles.category IS NULL
    """
    )
    op.drop_column("articles", "relevance")
    op.drop_column("articles", "image_url")
    # ### end Alembic commands ###
