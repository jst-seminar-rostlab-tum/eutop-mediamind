from src.db import get_supabase_client
import pytest
from fastapi.testclient import TestClient

from app.main import AppCreator

# EXAMPLE TESTS FOR COVERAGE PIPELINE


# Fixture for mock Supabase URL
@pytest.fixture
def mock_supabase_url() -> str:
    return "https://mockurl.supabase.co"


# Fixture for mock Supabase key
@pytest.fixture
def mock_supabase_key() -> str:
    return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"


# Fixture to get the current test's name (from your example)
@pytest.fixture
def test_name(request):
    return request.node.name


def test_get_supabase_client(
    monkeypatch, mock_supabase_url, mock_supabase_key
):
    """
    Tests successful Supabase client creation with valid mock credentials.
    """
    monkeypatch.setenv("SUPABASE_URL", mock_supabase_url)
    monkeypatch.setenv("SUPABASE_KEY", mock_supabase_key)

    client = get_supabase_client()
    assert client is not None
    # Verify the client was initialized with the correct URL and key
    assert client.supabase_url == mock_supabase_url
    assert "apikey" in client.options.headers
    assert client.options.headers["apikey"] == mock_supabase_key


def test_get_supabase_client_no_env(monkeypatch):
    """
    Tests that an exception is raised if Supabase environment variables are not set.
    """
    monkeypatch.delenv("SUPABASE_URL", raising=False)
    monkeypatch.delenv("SUPABASE_KEY", raising=False)

    with pytest.raises(Exception) as excinfo:
        get_supabase_client()
    assert "Supabase credentials are not set" in str(excinfo.value)


def test_get_supabase_client_invalid_credentials(monkeypatch):
    """
    Tests that an exception is raised if Supabase URL is invalid.
    The Supabase library itself should raise an error for malformed URLs.
    """
    monkeypatch.setenv("SUPABASE_URL", "invalid-url-format")
    monkeypatch.setenv(
        "SUPABASE_KEY", "any-valid-looking-key"
    )  # Key format check might come after URL

    with pytest.raises(Exception) as excinfo:
        get_supabase_client()
    # This assertion depends on src/db.py re-raising the original error
    # from supabase.create_client with this specific wrapper message.
    assert "Failed to initialize Supabase client" in str(excinfo.value)
    # The underlying error from supabase-python for an invalid URL should be part of the message.
    assert "Invalid URL" in str(excinfo.value)
